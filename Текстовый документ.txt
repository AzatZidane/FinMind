0) Видение и цели

FinMind — личный финансовый помощник с четырьмя вкладками: Данные → План → Советник → Настройки.
Цель: помочь пользователю понять структуру доходов/расходов, выстроить план (подушка/долги/цели), и получать точечные рекомендации ИИ по своим данным.

Кандидаты названий вкладок

Данные: «Бюджет», «Кошелёк», «Финансы», «Баланс».

План: «План», «Аналитика», «Стратегия».

Советник: «Советник», «Фин‑помощник», «Консультация».

Настройки: «Профиль», «Параметры».

Платформа/стек: iOS 16+, SwiftUI, локальное хранилище + синхронизация, ИИ через ваш Cloudflare Worker‑прокси (OpenAI). Текущая расстановка вкладок реализована в проекте (см. ContentView: табы «Данные/План/Советник») — расширяется вкладкой «Настройки».

1) Вкладка «Данные» (будущее название: «Бюджет»)
1.1. Структура секций (разворачиваемых/сворачиваемых)

Доходы

Расходы

Долги (кредиты)

Цели

Кнопка перехода в Календарь (подэкран «день‑за‑днём»)

Каждая секция имеет шеврон «▼/►» для сворачивания. В «Настройках» можно скрыть любую секцию/строку, оставив на экране только «Итого доход» и «Итого расход».

1.2. Доходы

Поля и поведение:

Месячный постоянный доход (сумма и список источников). Источник имеет: название, сумма, периодичность (ежемесячно/еженедельно/ежеквартально), дата начала, дата окончания (опц.), флаг Постоянный.

Разовые доходы (премия, подарок, подработка, возврат долга): название, сумма, дата, примечание.

Итого годовой доход — норедактируемое поле (серый/заблокированный инпут). Формула:
годовойДоход = 12 × нормализованныйМесячныйПостоянный + сумма разовых за выбранный период.
Нормализация постоянного дохода учитывает периодичность (неделя → ×52 / 12 и т. п.).

Добавление дохода через кнопку «+»: перед сохранением всплывает модалка «Это постоянный или разовый доход?». Если постоянный — предлагается указать периодичность; если разовый — дата события.

Валидации: сумма > 0; дата не в будущем для «фактического» разового, можно «плановый разовый» (будущая дата) — его учёт в прогнозах/календаре.

1.3. Расходы

Итоги в шапке секции:

Общий расход в год (рассчитанный)

Общий расход в месяц (рассчитанный)

Плановый средний расход/день (текущий месяц)
Формула: (плановый месячный расход / кол-во дней в месяце), где плановый = фиксированные статьи + плановые события из календаря.

Фактический средний расход/день (текущий месяц) — доступно, если пользователь в системе ≥ 3 месяцев и есть помеченные «фактические» траты в календаре/списке.
Формула: сумма фактических расходов за текущий месяц / номер текущего дня месяца.

Структура статей: название, сумма, категория (еда/жильё/транспорт/…); поддержка плановых расходов (например, «раз в квартал»).

1.4. Долги (кредиты) — отдельная секция, учитывается в расходах

Два варианта ввода:

Ежемесячный платёж (минимум/фикс) → система относит в ежемесячные расходы.

Параметры кредита: сумма, APR/ставка, срок/остаток, грейс‑период (опц.), минимальный платёж.
Программа рассчитывает рекомендуемую стратегию погашения (лавина/снежный ком) и формирует строку «ежемесячный обязательный платёж» для блока расходов. Расчёт долей для ускоренного погашения выполняет движок плана (см. 2.3).

1.5. Цели

Название, Сумма, Дедлайн, Приоритет (1–3). Добавление через «+».
Продолжаем текущую модель целей (в коде уже есть сущности профиля/целей, см. OnboardingView).

1.6. Календарь (подэкран)

Ежемесячная сетка календаря. По нажатию на день — лист «День»:

Планируемые доходы/расходы на день (автоподстановка по усреднённым планам).

Фактические доходы/расходы (если день в прошлом/сегодня).

Добавление строк «+ Доход/Расход»: название, сумма, тип, категория, пометка плановый/фактический.

Все внесённые записи в календаре учитываются в «Итогах» вкладки Данные (и далее в Плане).

Примечание по хранилищу: профиль и вводимые сущности уже сохраняются локально (см. Persistence.load/save). В ТЗ требуется расширить схему под календарные записи.

2) Вкладка «План» (название: «План» или «Аналитика»)
2.1. Назначение

Показывает СДП (свободный денежный поток) и распределение по трем направлениям: подушка безопасности, долги, цели — согласно движку планирования, который у вас уже есть (FinanceEngine).

2.2. Дашборд

Карточка «Свободно в месяц» (СДП).

Круговая диаграмма расходов по категориям (факт/план).

Столбчатая или линейная динамика «Доходы/Расходы/СДП» по интервалам.

Прогресс цели (progress‑bars) с ETA (месяцы до дедлайна, при текущем плане).

Интервалы: «День», «Неделя», «Месяц», «Квартал», «Год», «Период…» (date‑picker). Переключатели влияют на источники данных (плановые vs фактические).

2.3. Расчёт плана (движок)

Используем текущий FinanceEngine.makePlan:

Расчёт СДП = Доходы − Фикс.расходы − Мин.платежи по долгам.

Доли распределения по умолчанию: подушка 40%, долги 40% (стратегия «лавина» по максимальной ставке), цели 20%.

Для целей — весовая пропорция «приоритет / (месяцы до дедлайна)».

Выход: список Allocation (категория, сумма в месяц, rationale) + notes.
Приёмка: значения совпадают с эталонными расчётами на тест‑наборах (юнит‑тесты движка).

3) Вкладка «Советник» (ИИ)
3.1. Назначение и тональность

Короткие, практичные рекомендации по личным финансам пользователя — только в пределах темы (бюджет, подушка, долги, базовые инвестиции, налоги/вычеты, страхование).
Запрещено раскрывать, что это ChatGPT/модель; на «кто ты?» ассистент отвечает «Я ваш финансовый консультант в FinMind…».

3.2. Первый отклик

При первом запросе ассистент делает быструю оценку профиля (по данным из вкладки «Данные/План»):

краткая диагностика (СДП, долговая нагрузка, подушка vs цель),

3–5 приоритетных шагов,

микро‑расчёты (диапазоны),

риски/заметки.
Реализуется через системный промпт + сводка AppState/движка (в кодовой базе уже есть заготовки вызовов ИИ).

3.3. Ограничения общения

Только финтематика: если вопрос вне темы — вежливый ответ+пример переписки по теме.

Ограничение длины: до 100–150 символов (конфиг через remote‑config; базово — 100).

Лимит запросов/сутки: по умолчанию 20 (можно 10/день для бесплатного тарифа).
Эти ограничения и фильтры уже частично реализованы в ChatService (лимиты, тематические проверки, «кто ты»‑ответ, пресеты, автоподсказки, счётчик символов).

3.4. UX

Поле ввода с live‑счётчиком символов; чипы‑подсказки и «быстрые вопросы».

Кнопка «Совет по моим данным» — формирует короткий агрегированный запрос (есть в AppState/ChatView).

В навбаре и на клавиатурном тулбаре — кнопка «Главная» (быстрый возврат на первую вкладку).

Показ сегодня: X/20; при исчерпании — понятный баннер.

3.5. Технически

Запросы идут на ваш Cloudflare Worker‑прокси (ключ OpenAI не вшивается в приложение; используется заголовок x-client-token).

Модель по умолчанию: gpt‑4o‑mini (подтверждена рабочей командой curl); фолбэк — gpt‑4o.

При ошибках показываем текст, который вернул API/прокси; логируем коды.

4) Вкладка «Настройки»
4.1. Профиль

Аватар (PhotosPicker, iOS 16+; Info.plist: Photo Library Usage Description).

Никнейм (необязательный, уникальность не проверяем в v1).

Кнопка «Поделиться приложением» (ShareSheet с ссылкой App Store/TestFlight).

4.2. Тема и акцент

Системная/Светлая/Тёмная;

Акцентный цвет (8 пресетов);

Сезонные темы (v1.1): «Новогодняя» — снежинки в PlanView, праздничный акцент.

4.3. Советник

Переключатель Эконом‑режим (короче ответы, меньше токенов).

Сброс диалога (очистка локального лога/сессии).

Индикация «Запросов сегодня».

4.4. Обратная связь

Экран «Обратная связь»:

Email (optional), Telegram (optional), Описание (обязательное, ≥ 20 символов), чекбокс «Приложить диагностический лог (последние 1000 строк)».

Кнопка Отправить → POST на API «/feedback».
Статусы: успех/ошибка; повторная отправка.

4.5. Управление видимостью полей на «Данные»

Чекбоксы: «Показывать годовой доход», «Показывать плановый средний/день», «Показывать фактический средний/день» и т. п. (сохраняется в UserDefaults).

5) Хранение данных и синхронизация
5.1. На устройстве (офлайн‑first)

Core Data или SQLite (GRDB) — структурированные сущности: Income/Expense/Debt/Goal/DailyEntry/Settings.

Локальные вычисления для Plan/Аналитики — из офлайн‑данных (плановые и фактические).

Чувствительные токены (сессия) — Keychain.

5.2. Межустройственная синхронизация

Вариант A (рекомендуется для v1): CloudKit

Простая авторизация Apple ID; приватная база на iCloud; автоматический мердж.

Плюс: соответствие политике Apple, меньше бэкенд‑рисков.

Минус: серверный анализ сложнее (нет сырого доступа к БД).

Вариант B: Собственный бекенд (PostgreSQL) + Sign in with Apple

API: /auth/apple, /profile, /incomes, /expenses, /debts, /goals, /daily, /advisor/log.

Токены — short‑lived (JWT) + refresh, в Keychain.

Репликация: при онлайне пушим дельты; при офлайне — очередь.

5.3. Серверная БД (PostgreSQL) — базовая схема

users(id, apple_sub, email_opt, nickname, created_at, country, locale)

devices(id, user_id, model, os, app_version, push_opt_in, created_at)

sessions(id, user_id, token_hash, expires_at, created_at)

profiles(id, user_id, emergency_months, horizon_months, updated_at)

incomes(id, user_id, name, amount, periodicity, start_at, end_at, is_recurring)

expenses(id, user_id, name, amount, category, periodicity, start_at, end_at)

debts(id, user_id, name, principal, apr, min_payment, term_months, created_at)

goals(id, user_id, name, target_amount, deadline, priority, created_at)

daily_entries(id, user_id, date, type ENUM(income,expense), name, amount, category, planned_bool, created_at)

advisor_conversations(id, user_id, created_at)

advisor_messages(id, conv_id, role ENUM(user,assistant,system), content, tokens_in, tokens_out, created_at)

feedback(id, user_id_opt, email_opt, telegram_opt, description, has_logs, created_at)

events(id, user_id_opt, name, props JSONB, ts) (продуктовая телеметрия)

IP/страна/язык:

Страна/язык — из Locale при регистрации или по гео IP в API‑шлюзе (сохраняем двухбуквенный ISO и ru_RU/en_US).

IP — используем в access‑логах/антифроде с TTL 30 дней; не храним в профиле как долговременный идентификатор.

Cookies — не нужны для нативного приложения.

Auth token (последний) — хранить хэш/идентификатор версии токена, не сам токен в открытом виде.

5.4. Логи переписки с ИИ

Лог хранится в advisor_messages, привязан к пользователю/сессии (для аналитики качества ответа и истории).

Хранение контента — с редакцией персональных данных (если применимо) и сроком жизни (напр., 180 дней) + право пользователя удалить историю.

6) Соответствие политике Apple (App Store Review Guidelines)

5.1 Data Collection and Storage:

собирайте только необходимое; до сбора показывайте Privacy Notice/политику;

запросы на доступ к фото/контактам/локации — только при необходимости, с объяснением;

храните токены/учётные данные в Keychain; сервер — по TLS, данные — на защищённых серверах;

не используйте отпечатки устройства для отслеживания (device fingerprinting).

ATT (App Tracking Transparency) не нужен, если вы не используете IDFA/кросс‑приложечное трекинг‑SDK.

Разрешается хранить на сервере: учетные записи, агрегированные финансовые данные, журналы переписки с ИИ с согласия и с политикой конфиденциальности. Нельзя хранить сверхнужное (например, постоянные IP‑логи без причин).

Обязательные элементы: Страница Privacy Policy, пункт в «Настройках», обработка запросов на удаление данных (право на забвение).

7) Аналитика продукта (события)

app_open, first_run, onboarding_done

income_added, expense_added, debt_added, goal_added, daily_entry_added

plan_recalculated (время расчёта, СДП)

advisor_request (длина запроса, тема), advisor_reply (успех/ошибка, tokens_out)

settings_changed (theme/accent/economy_mode)

feedback_submitted (has_logs)
Собираем агрегаты без сторонней идентификации пользователей; храним user_id/сессионный id.

8) Нефункциональные требования

Производительность: 60 fps; любое действие UI — ответ ≤ 200 мс (кроме сетевых операций).

Оффлайн: полнофункциональные «Данные»/«План», «Советник» показывает состояние «нет соединения».

Доступность: Dynamic Type, VoiceOver‑ярлыки, контраст ≥ WCAG AA.

Локализация: ru (v1), en (v1.1).

Безопасность: TLS 1.2+, key pinning (v1.1), ротация CLIENT_TOKEN прокси.

9) Критерии приёмки по ключевым функциям

Данные/Доходы

Добавление постоянного/разового дохода; годовой доход пересчитан; UI блокирует редактирование годового.

Секция сворачивается/разворачивается; настройки скрывают секцию.

Данные/Расходы

Видны год/месяц/средний плановый/фактический (при наличии истории > 3 мес).

Плановый дневной расход корректен при смене длины месяца.

Долги

Ввод через «ежемесячный платёж» и через «параметры кредита»; строка ежемесячного платежа появляется в расходах.

Календарь

В день можно внести и плановые, и фактические записи; фактические учитываются в «фактических» метриках.

План

Карточка СДП, список аллокаций и заметок формируются из данных (сопадает с эталонными расчётами движка).

Советник

При первом запуске — структурированный ответ «диагностика + шаги».

Ограничение 100 символов и 20 запросов/день соблюдается; вне темы — корректный отбой; на «кто ты» — маскирующий ответ. (Логика лимитов/фильтров уже в ChatService.)

Настройки

Смена темы/акцента мгновенно; добавление/удаление аватара; отправка обратной связи с валидацией.

10) Архитектура приложений и интеграций

iOS‑клиент: SwiftUI, состояние в AppState, расчёты плана в FinanceEngine (уже реализован).

ИИ‑шлюз: Cloudflare Worker‑прокси с заголовком x-client-token (есть у вас и проверен curl), модель — gpt‑4o‑mini.

Синхронизация: CloudKit (v1) или собственный бэкенд (v1.1) с PostgreSQL.

Логи переписки: через API «/advisor/log» (вставка сообщений после ответа модели).

11) Экраны и состояния (UX‑детализация)

Пустые состояния:

Данные: подсказки «Добавьте доход/расход/цель».

План: «Добавьте данные и нажмите “Пересчитать”».

Советник: «Задайте вопрос — не более 100 символов» + пресеты.

Ошибки/сеть: бейджи «Нет соединения», «Ошибка ИИ: <текст от API>».

Загрузки: индикаторы в кнопках (как в текущем ChatView).

12) Тест‑план (минимум)

Юнит‑тесты FinanceEngine: 10 сценариев (нулевые/крайние/с датами целей/разными стратегиями).

UI‑тесты: добавление дохода/расхода/долга/цели; календарь; смена темы; ограничение символов; лимит запросов/день.

Интеграционные: прокси‑вызов ИИ; логирование сообщений; обработка ошибок.

Регресс по скрытию секций и сохранению настроек.

13) План релиза (итерации)

M1 — Данные+План (офлайн): доходы/расходы/долги/цели, расчёты плана, базовая аналитика.

M2 — Календарь: дневные записи, план/факт, влияния на метрики.

M3 — Советник: лимиты, фильтры, первый ответ‑диагностика, пресеты/подсказки.

M4 — Настройки: профиль, тема/акцент, обратная связь, скрытие секций.

M5 — Синхронизация: CloudKit (или собственный бэкенд + SIWA).

M6 — Политики и выпуск: политика конфиденциальности, локализация, QA.

Примечания к текущему коду

Табы «Данные/План/Советник» уже заложены (ContentView). Добавление вкладки «Настройки» — расширение текущей структуры.

Движок плана уже отдаёт СДП, аллокации и заметки, его стоит использовать как «истину» для вкладки «План».

AppState/Persistence уже обслуживает профиль и пересчёт плана — масштабируем под календарные записи.

Советник: лимиты, фильтры, пресеты и короткий запрос «по моим данным» уже реализованы и подлежат допиливанию под точные тексты и UX.